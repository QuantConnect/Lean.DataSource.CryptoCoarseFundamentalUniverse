/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using System;
using System.Collections.Generic;
using Python.Runtime;
using QuantConnect.DataSource;
using QuantConnect.Algorithm;
using QuantConnect.Algorithm.Framework.Selection;

namespace QuantConnect.Data.UniverseSelection
{
    /// <summary>
    /// Defines a universe selection model that reads Crypto coarse data.
    /// </summary>
    public class CryptoCoarseFundamentalUniverseSelectionModel : UniverseSelectionModel
    {
        private readonly string _market;
        private readonly UniverseSettings _universeSettings;
        private readonly Func<IEnumerable<CryptoCoarseFundamental>, IEnumerable<Symbol>> _selector;
        private CryptoCoarseFundamentalUniverse _universe;
        
        public virtual IEnumerable<Symbol> Selector(IEnumerable<CryptoCoarseFundamental> data)
        {
            if (_selector != null)
            {
                return _selector(data);
            }
            throw new ArgumentException("Selector can't be null");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoCoarseFundamentalUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="market">Crypto market from which to select the universe constituents</param>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        /// <param name="selector">Function to select the universe constituents</param>
        public CryptoCoarseFundamentalUniverseSelectionModel(
            string market, 
            UniverseSettings universeSettings, 
            Func<IEnumerable<CryptoCoarseFundamental>, IEnumerable<Symbol>> selector)
        {
            _market = market;
            _universeSettings = universeSettings;
            _selector = selector;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoCoarseFundamentalUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="market">Crypto market from which to select the universe constituents</param>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        /// <param name="selector">Function to select the universe constituents</param>
        public CryptoCoarseFundamentalUniverseSelectionModel(
            string market, 
            UniverseSettings universeSettings, 
            PyObject selector)
            : this(market, universeSettings, selector.ConvertPythonUniverseFilterFunction<CryptoCoarseFundamental>())
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoCoarseFundamentalUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="market">Crypto market from which to select the universe constituents</param>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        public CryptoCoarseFundamentalUniverseSelectionModel(
            string market, 
            UniverseSettings universeSettings)
            : this(market, universeSettings, default(Func<IEnumerable<CryptoCoarseFundamental>, IEnumerable<Symbol>>))
        {
        }

        /// <summary>
        /// Creates a new Crypto universe using this class's selection function
        /// </summary>
        /// <param name="algorithm">The algorithm instance to create universes for</param>
        /// <returns>The universe defined by this model</returns>
        public override IEnumerable<Universe> CreateUniverses(QCAlgorithm algorithm)
        {
            _universe ??= new CryptoCoarseFundamentalUniverse(_market, _universeSettings, Selector);
            return new[] { _universe };
        }
    }
}